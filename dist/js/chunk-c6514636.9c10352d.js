(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-c6514636"],{"1b4a":function(n,e,a){"use strict";a.r(e);var t=function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ae-layout",[a("ae-layout-content",{staticClass:"demo-wrapper"},[a("code",{staticClass:"markdown-body",domProps:{innerHTML:n._s(n.md)}})])],1)},i=[],l=a("d225"),c=a("308d"),o=a("6bb5"),r=a("4e2b"),u=a("9ab4"),s=(a("5121"),a("8bbf")),p=a.n(s),b=a("2fe1"),d=a("d5bf"),m=a.n(d),h=function(n){function e(){var n;return Object(l["a"])(this,e),n=Object(c["a"])(this,Object(o["a"])(e).apply(this,arguments)),n.md=m.a,n}return Object(r["a"])(e,n),e}(p.a);h=u["b"]([Object(b["a"])({name:"ViewsReadme"})],h);var f=h,w=f,j=a("2877"),O=Object(j["a"])(w,t,i,!1,null,null,null);e["default"]=O.exports},5121:function(n,e,a){},d5bf:function(n,e){n.exports='<h1 id="vschemaform-是什么">VSchemaForm 是什么</h1>\n<h2 id="背景">背景</h2>\n<p>表单问题，不管是在 jQuery 时代，还是 Vue/React 时代，\n都永远是前端工程师们的痛，但是这又是没办法的事情，业务需求多种多样，\n对于中后台业务而言，表单页面和报表页面基本上是中后台业务的核心展现形式，\n但是，如何帮助开发者更高效的开发表单，目前传统的表单开发方式：</p>\n<ul>\n<li>手动管理表单状态</li>\n<li>手动收集表单数据</li>\n<li>手动管理表单校验状态</li>\n</ul>\n<p>存在哪些问题？</p>\n<ul>\n<li>表单状态管理变得越来越难以维护，需要引入状态管理库</li>\n<li>传统表单开发的数据结构往往都是扁平结构，没法很好的处理嵌套复杂数据的情况，\n如果要处理，工作量会非常大</li>\n<li>当业务有动态输出表单的需求的时候，不得不自己开发一个基于某种数据协议的动态输出表单的组件</li>\n<li>当业务需要在可视化界面配置产出表单时，需要自己开发一个基于json的动态输出表单组件</li>\n</ul>\n<h2 id="方案">方案</h2>\n<p>基于以上问题的探索，以及受到UForm的启发，研发了VSchemaForm的Vue表单解决方案：</p>\n<p>UForm的核心</p>\n'}}]);
//# sourceMappingURL=chunk-c6514636.9c10352d.js.map